shorthands:
------------
1, onChange handler for multiple input:
   ------------------------------------
  (loveMeter)
    https://www.pluralsight.com/guides/handling-multiple-inputs-with-single-onchange-handler-react
  
2, onChange in useReducer:
   -----------------------
(onChangeReducer)
    https://medium.com/swlh/usereducer-form-example-16675fa60229


3, captalize string:
   -----------------


3, LoveMeter:
   ----------
   Api: love-calculator
   ---

    import React,{ useState } from 'react'
    import axios from 'axios'
    import './style.css'

    export const LoveMeter = () => {
        const [couple, setCouple] = useState({ firstName:'', secondName: '' })
        const [report, setReport] = useState({})
        const [isLoading, setIsLoading] = useState(false)
        const [isSubmited, setIsSubmited] = useState(false)

        const onChangeHandler = (e) => {
            const onChangeValue = e.target.value
            setCouple(
                {
                    ...couple,
                    [e.target.name] : onChangeValue
                }
            )
        }

        const formSubmitHandler = async (e) => {
            
            e.preventDefault()

            setIsLoading(true)

            const options = {
                method: 'GET',
                url: 'https://love-calculator.p.rapidapi.com/getPercentage',
                params: {fname: couple.firstName , sname: couple.secondName  },
                headers: {
                'X-RapidAPI-Key': 'e3dc3da840msh029ff60fb38eb47p147d3cjsncb1ccd2d319a',
                'X-RapidAPI-Host': 'love-calculator.p.rapidapi.com'
                }
            };

            await axios
            .request(options)
            .then( r => {
                setReport(r.data)
                console.log(r.data);
            })
            .catch( er => {
                console.error(er);
            });
            
            setIsSubmited(true)
            
            setIsLoading(false)
        }

        
        return (
            <div className='loveMeter'>
                <h2>Love Meter</h2>
                <form onSubmit={ formSubmitHandler }>
                    <input 
                        required
                        type='text'
                        placeholder='Enter First Name'
                        value={couple.firstName}
                        name='firstName'
                        onChange={ onChangeHandler }
                    />
                    <input 
                        required
                        type='text'
                        placeholder='Enter Second Name'
                        value={couple.secondName}
                        name='secondName'
                        onChange={ onChangeHandler }
                    />
                    <button type='submit'>Find</button>
                </form>
                
                {
                    isSubmited ? isLoading ? <div className='coupleReport'> <p>Processing...</p> </div> :                
                        <div className='coupleReport'>
                            <p>Hello <b>{report.fname}</b> and <b>{report.sname}</b> </p>
                            <p>Love percentage : <b>{report.percentage} %</b> </p>
                            <p>"{report.result}"</p>
                        </div>
                    : null
                }
                
            </div>
        )
    }


4, Get a list of posts, using 'title' key.
   ----------------------------------

api-url: 'https://jsonplaceholder.typicode.com/posts' 
--------

    import axios from 'axios'
    import React,{useState, useEffect} from 'react'

    export const ListOfPosts = () => {
        const [posts, setPosts] = useState([])
        const [isSubmited, setIsSubmited] = useState(false)
        const handleGetPosts = () => {
            setIsSubmited(!isSubmited)
        }
        useEffect(
            () => {
                axios.get('https://jsonplaceholder.typicode.com/posts')
                .then( 
                    r => {
                        console.log(r.data)
                        setPosts(r.data)
                    }
                )
                .catch( er => console.log(er))
            },[]
        )
        return (
            <div>
                <h2>List of Posts form JsonPlaceholder</h2>
                <button onClick={handleGetPosts}>Get Posts</button>
                <ul>
                    {
                        isSubmited ?
                        posts.map(
                            post => <li key={post.id}>{post.title}</li>
                        ) : null
                    }
                </ul>
            </div>
        )
    }

5, Get Specific post using its 'id' key 
  --------------------------------------
api-url: 'https://jsonplaceholder.typicode.com/posts' 
--------
    import axios from 'axios'
    import React,{useEffect, useState} from 'react'

    export const PostById = () => {
        const [id, setId] = useState(1)
        const [post, setPost] = useState({})
        useEffect(
            () => {
                axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`)
                .then(
                    r => {
                        console.log(r.data)
                        setPost(r.data)
                    }
                )
                .catch(
                    er => console.log(er)
                )
            },[id]
        )
        return (
            <div>
                <h2>Get Post using Id</h2>
                <input 
                    type='text'
                    placeholder='Enter Id'
                    value={id}
                    onChange={ e => setId(e.target.value)}
                />
                <div>
                    { post.title }
                </div>
            </div>
        )
    }


Yahoo weather app:
-----------------
'required' - attribute only works inside <form> 
Api-data:
---------
{
  "location": {
    "city": "Madurai",
    "region": " TN",
    "woeid": 2295425,
    "country": "India",
    "lat": 9.91594,
    "long": 78.10685,
    "timezone_id": "Asia/Kolkata"
  },
  "current_observation": {
    "wind": {
      "chill": 85,
      "direction": 293,
      "speed": 5
    },
    "atmosphere": {
      "humidity": 73,
      "visibility": 1.99,
      "pressure": 29.83,
      "rising": 0
    },
    "astronomy": {
      "sunrise": "6:23 am",
      "sunset": "5:57 pm"
    },
    "condition": {
      "code": 28,
      "text": "Mostly Cloudy",
      "temperature": 79
    },
    "pubDate": 1670494200
  },
  "forecasts": [
    {
      "day": "Thu",
      "date": 1670468400,
      "low": 71,
      "high": 92,
      "text": "Mostly Cloudy",
      "code": 28
    },
    {
      "day": "Fri",
      "date": 1670554800,
      "low": 69,
      "high": 78,
      "text": "Showers",
      "code": 11
    },
    {
      "day": "Sat",
      "date": 1670641200,
      "low": 72,
      "high": 88,
      "text": "Partly Cloudy",
      "code": 30
    },
    {
      "day": "Sun",
      "date": 1670727600,
      "low": 72,
      "high": 87,
      "text": "Partly Cloudy",
      "code": 30
    },
    {
      "day": "Mon",
      "date": 1670814000,
      "low": 73,
      "high": 87,
      "text": "Mostly Cloudy",
      "code": 28
    },
    {
      "day": "Tue",
      "date": 1670900400,
      "low": 74,
      "high": 88,
      "text": "Showers",
      "code": 11
    },
    {
      "day": "Wed",
      "date": 1670986800,
      "low": 74,
      "high": 86,
      "text": "Showers",
      "code": 11
    },
    {
      "day": "Thu",
      "date": 1671073200,
      "low": 76,
      "high": 82,
      "text": "Cloudy",
      "code": 26
    },
    {
      "day": "Fri",
      "date": 1671159600,
      "low": 75,
      "high": 80,
      "text": "Rain",
      "code": 12
    },
    {
      "day": "Sat",
      "date": 1671246000,
      "low": 68,
      "high": 90,
      "text": "Sunny",
      "code": 32
    },
    {
      "day": "Sun",
      "date": 1671332400,
      "low": 71,
      "high": 82,
      "text": "Cloudy",
      "code": 26
    }
  ]
}

YahooWeatherApp.jsx;
--------------------
import React,{useState} from 'react'
import axios from "axios"
import { WeatherCard } from './WeatherCard'
import './style.css'


export const YahooWeatherApp = () => {
    const [weatherData, setWeatherData] = useState({})
    const [cityName, setCityName] = useState('')
    const [isLoading, setIsLoading] = useState(false)
    const [isSubmited, setIsSubmited] = useState(false)

    
    const handleSubmit = async (e) => {
        e.preventDefault()
        setIsLoading(true)
        
        const options = {
            method: 'GET',
            url: 'https://yahoo-weather5.p.rapidapi.com/weather',
            params: {location: cityName, format: 'json', u: 'f'},
            headers: {
                'X-RapidAPI-Key': '59dbbe565amshcd3e9aceff0e38ap13fc4ajsnd8c024328e3b',
                'X-RapidAPI-Host': 'yahoo-weather5.p.rapidapi.com'
            }
        };

        await axios.request(options)
        .then( re => {
            setWeatherData(re.data)
        }).catch( er => {
            setWeatherData(er)
            console.log(er)
        });

        setIsSubmited(true)
        setIsLoading(false)
    }

  return (
    <div>
        <h2>Yahoo Weather-App</h2>
        <form onSubmit={ handleSubmit }>
            <input 
                required
                type='text'
                placeholder='Enter city name'
                value={cityName}
                onChange={ e => setCityName(e.target.value) }
            />
            <button>Get-Report</button>
        </form>
        {   
            isSubmited 
            ? isLoading 
            ? <p>Loading...</p> 
            : <WeatherCard report={weatherData} /> 
            : null
        }
    </div>
  )
}

useContext + useReducer
------------------------
    1, create & export your React.createContext in you parent Component 
        export const CountContext = React.createContext()
        
    2, Wrap your child components with <context.Provider>   
        <CountContext.Provider }>
            <CompoA />
            <CompoB />
            <CompoC />
        </CountContext.Provider>
    
    3, create your useReducer
        const [count, dispatch] = useReducer(reducer, initialState)
    
    4, create your initialState & reducer function 
            const initialState = 0
            const reducer = (state, action) => {
                switch(action){
                    case 'increment':
                        return state + 1
                    case 'decrement': 
                        return state - 1
                    case 'reset':
                        return initialState
                    default:
                        return state 
                }
            }
    
    5, pass the state, dispatch to you child component using 'value' attribute in the context.Provider.
        <CountContext.Provider value={ {countState: count, countDispatch: dispatch, btnStyle: buttonStyle} }>
            <CompoA />
            <CompoB />
            <CompoC />
        </CountContext.Provider>

    6, import the context to your child component from the parent component.
        import { CountContext } from './ParentCompo'
        
    7, assign the context to const 
        const countContext = useContext(CountContext)

    8, bind the cotext props to the event 
        <button style={countContext.btnStyle} onClick={() => countContext.countDispatch('increment')}>Inc</button>
        <button style={countContext.btnStyle} onClick={() => countContext.countDispatch('decrement')}>Dec</button>
        <button style={countContext.btnStyle} onClick={() => countContext.countDispatch('reset')}>Reset</button>


Data fetch using useReducer:
----------------------------
    * import useReducer, useEffect & axios
    * In useReducer we declare the state as object:
        const initialState = {
            loading: true,
            error: '',
            post: {}
        }
    * create the useReducer():
        const [state, dispatch] = useReducer(reducer, initialState)
    * Fetch the Api in useEffect using axios.
        useEffect(
            () => {
                axios   
                    .get('https://jsonplaceholder.typicode.com/posts/1')
                    .then(
                        r => {
                            dispatch(
                                {
                                    type: 'FETCH_SUCCESS',
                                    payLoad: r.data
                                }
                            )
                        }
                    )
                    .catch(
                        e => {
                            dispatch(
                                {
                                    type: 'FETCH_ERROR',
                                }
                            )
                        }
                    )
            },[]
        )

    * write the reducer function, accept currentState and action to be performed.
        const reducer = (state, action) => {
            switch(action.type) {
                case 'FETCH_SUCCESS' :
                    return{
                        loading: false,
                        post: action.payLoad,
                        error: ''
                    }
                case 'FETCH_ERROR':
                    return{
                        loading: false,
                        post: {},
                        error: 'Something went wrong!'
                    }
                default:
                    return state
            }
        }
    * Render it in JSX:
        { state.loading ? 'Loading' : state.post.title }
        { state.error ? state.error : null }


    UseReducerDataFetch.js:
    ----------------------  
        import React,{useReducer, useEffect} from 'react'
        import axios from 'axios'

        const initialState = {
            loading: true,
            error: '',
            post: {}
        }

        const reducer = (state, action) => {
            switch(action.type) {
                case 'FETCH_SUCCESS' :
                    return{
                        loading: false,
                        post: action.payLoad,
                        error: ''
                    }
                case 'FETCH_ERROR':
                    return{
                        loading: false,
                        post: {},
                        error: 'Something went wrong!'
                    }
                default:
                    return state
            }
        }

        function UseReducerDataFetch() {
            
            const [state, dispatch] = useReducer(reducer, initialState)

            useEffect(
                () => {
                    axios   
                        .get('https://jsonplaceholder.typicode.com/posts/1')
                        .then(
                            r => {
                                dispatch(
                                    {
                                        type: 'FETCH_SUCCESS',
                                        payLoad: r.data
                                    }
                                )
                            }
                        )
                        .catch(
                            e => {
                                dispatch(
                                    {
                                        type: 'FETCH_ERROR',
                                    }
                                )
                            }
                        )
                },[]
            )

            return (
                <div>
                    {/* UseReducerDataFetch */}
                    { state.loading ? 'Loading' : state.post.title }
                    { state.error ? state.error : null }
                </div>
            )
        }

        export default UseReducerDataFetch

Difference b/w useState & useReducer:
-------------------------------------
        Scenario                 useState                       useReducer

*   Type of state              Num,str,bool                  Objects & array
* No.of.state.transitions        1 or 2                         too many
* Related state transitions        no                              yes
* Business logic              no Business logic              complex Business logic 
* state logic                     local                          global



PlanetApp
---------
    Api-data:
    ---------
[
    {
    "basicDetails": [
      {
        "mass": "5.6834 x 10^26 kg",
        "volume": "8.2713 x 10^14 km^3"
      }
    ],
    "description": "Saturn is the sixth planet from the Sun and the second-largest in the Solar System, after Jupiter. It is a gas giant with an average radius of about nine and a half times that of Earth. It has only one-eighth the average density of Earth; however, with its larger volume, Saturn is over 95 times more massive.",
    "id": 6,
    "imgSrc": [
      {
        "img": "https://upload.wikimedia.org/wikipedia/commons/c/c7/Saturn_during_Equinox.jpg",
        "imgDescription": "Pictured in natural color approaching equinox, photographed by Cassini in July 2008; the dot in the bottom left corner is Titan."
      }
    ],
    "key": "45l1h8dab43b",
    "name": "Saturn",
    "planetOrder": "6",
    "source": "Wikipedia",
    "wikiLink": "https://en.wikipedia.org/wiki/Saturn"
  },
  {
    "basicDetails": [
      {
        "mass": "1.8982 x 10^27 kg",
        "volume": "1.4313 x 10^15 km^3"
      }
    ],
    "description": "Jupiter is the fifth planet from the Sun and the largest in the Solar System. It is a gas giant with a mass more than two and a half times that of all the other planets in the Solar System combined, but slightly less than one-thousandth the mass of the Sun.",
    "id": 5,
    "imgSrc": [
      {
        "img": "https://upload.wikimedia.org/wikipedia/commons/2/2b/Jupiter_and_its_shrunken_Great_Red_Spot.jpg",
        "imgDescription": "Full disk view in natural colour, taken by the Hubble Space Telescope in April 2014"
      }
    ],
    "key": "75oii1s99r6e",
    "name": "Jupiter",
    "planetOrder": "5",
    "source": "Wikipedia",
    "wikiLink": "https://en.wikipedia.org/wiki/Jupiter"
  },
  {
    "basicDetails": [
      {
        "mass": "(8.6810±0.0013) x 1025 kg",
        "volume": "6.833 x 1013 km^3"
      }
    ],
    "description": "Uranus is the seventh planet from the Sun. Its name is a reference to the Greek god of the sky, Uranus, who, according to Greek mythology, was the great-grandfather of Ares, grandfather of Zeus and father of Cronus. It has the third-largest planetary radius and fourth-largest planetary mass in the Solar System.",
    "id": 7,
    "imgSrc": [
      {
        "img": "https://upload.wikimedia.org/wikipedia/commons/4/48/Uranus_as_seen_by_NASA%27s_Voyager_2_%28remastered%29.png",
        "imgDescription": "Photograph of Uranus in true colour (by Voyager 2 in 1986)"
      }
    ],
    "key": "9jun2xna6ig8",
    "name": "Uranus",
    "planetOrder": "7",
    "source": "Wikipedia",
    "wikiLink": "https://en.wikipedia.org/wiki/Uranus"
  },
  {
    "basicDetails": [
      {
        "mass": "1.02413 x 1026 kg",
        "volume": "6.253 x 1013 km^3"
      }
    ],
    "description": "Neptune is the eighth and farthest-known Solar planet from the Sun. In the Solar System, it is the fourth-largest planet by diameter, the third-most-massive planet, and the densest giant planet. It is 17 times the mass of Earth, and slightly more massive than its near-twin Uranus.",
    "id": 8,
    "imgSrc": [
      {
        "img": "https://upload.wikimedia.org/wikipedia/commons/6/63/Neptune_-_Voyager_2_%2829347980845%29_flatten_crop.jpg",
        "imgDescription": "Photograph taken by NASA's Voyager 2 in 1989"
      }
    ],
    "key": "bo6209to463g",
    "name": "Neptune",
    "planetOrder": "8",
    "source": "Wikipedia",
    "wikiLink": "https://en.wikipedia.org/wiki/Neptune"
  },
  {
    "basicDetails": [
      {
        "mass": "4.8675 x 10^24 kg",
        "volume": "9.2843 x 10^11 km^3"
      }
    ],
    "description": "Venus is the second planet from the Sun and is named after the Roman goddess of love and beauty. As the brightest natural object in Earth's night sky after the Moon, Venus can cast shadows and can be visible to the naked eye in broad daylight.",
    "id": 2,
    "imgSrc": [
      {
        "img": "https://upload.wikimedia.org/wikipedia/commons/0/08/Venus_from_Mariner_10.jpg",
        "imgDescription": "False colour composite of Venus in visual and ultraviolet wavelengths (from Mariner 10). The surface is completely obscured by clouds."
      }
    ],
    "key": "cgk97im24nbi",
    "name": "Venus",
    "planetOrder": "2",
    "source": "Wikipedia",
    "wikiLink": "https://en.wikipedia.org/wiki/Venus"
  },
  {
    "basicDetails": [
      {
        "mass": "5.97237 x 1024 kg",
        "volume": "1.08321 x 1012 km3"
      }
    ],
    "description": "Earth is the third planet from the Sun and the only astronomical object known to harbor life. While large amounts of water can be found throughout the Solar System, only Earth sustains liquid surface water. About 71% of Earth's surface is made up of the ocean, dwarfing Earth's polar ice, lakes, and rivers.",
    "id": 3,
    "imgSrc": [
      {
        "img": "https://upload.wikimedia.org/wikipedia/commons/c/cb/The_Blue_Marble_%28remastered%29.jpg",
        "imgDescription": "A photograph of Earth taken by the crew of Apollo 17 in 1972. A processed version became widely known as The Blue Marble."
      }
    ],
    "key": "dzvlvhsr344i",
    "name": "Earth",
    "planetOrder": "3",
    "source": "Wikipedia",
    "wikiLink": "https://en.wikipedia.org/wiki/Earth"
  },
  {
    "basicDetails": [
      {
        "mass": "6.4171 x 10^23 kg",
        "volume": "1.63118 x 10^11 km^3"
      }
    ],
    "description": "Mars is the fourth planet from the Sun and the second-smallest planet in the Solar System, being larger than only Mercury. In English, Mars carries the name of the Roman god of war and is often called the \"Red Planet\".",
    "id": 4,
    "imgSrc": [
      {
        "img": "https://upload.wikimedia.org/wikipedia/commons/0/02/OSIRIS_Mars_true_color.jpg",
        "imgDescription": "Pictured in natural color in 2007"
      }
    ],
    "key": "j2zfgarv8a5y",
    "name": "Mars",
    "planetOrder": "4",
    "source": "Wikipedia",
    "wikiLink": "https://en.wikipedia.org/wiki/Mars"
  },
  {
    "basicDetails": [
      {
        "mass": "3.3011 x 10^23 kg ",
        "volume": "6.083 x 10^10 km^3"
      }
    ],
    "description": "Mercury is the smallest planet in the Solar System and the closest to the Sun. Its orbit around the Sun takes 87.97 Earth days, the shortest of all the Sun's planets.",
    "id": 1,
    "imgSrc": [
      {
        "img": "https://upload.wikimedia.org/wikipedia/commons/4/4a/Mercury_in_true_color.jpg",
        "imgDescription": "Mercury in true color (by MESSENGER in 2008)"
      }
    ],
    "key": "zmxk1zx92lo8",
    "name": "Mercury",
    "planetOrder": "1",
    "source": "Wikipedia",
    "wikiLink": "https://en.wikipedia.org/wiki/Mercury_(planet)"
  }
]


onChangeReducer:
-----------------
import React,{useReducer} from 'react'
const initialState = {
    submited: false,
    name: '',
    lname: ''
}
const reducer = (state, action) => {
    switch(action.type){
        case 'ON_CHANGE':
            return{
                ...state,
                [action.field] : action.payload
            }
        case 'SUBMITED':
            return{
                ...state, 
                submited: action.flag
            }
        default:
            return state 
    }
}
export const OnChangeReducer = () => {

    const [state, dispatch] = useReducer(reducer, initialState)
    const handleSubmit = (e) => {
        e.preventDefault()
        dispatch({type:'SUBMITED', flag: true})
        console.log(state.name)
    }
  return (
    <div>
        <form onSubmit={handleSubmit}>
            <input 
                type='text'
                placeholder='Enter text'
                name = 'name'
                value={state.name}
                onChange={ e => dispatch({
                    type:'ON_CHANGE',
                    field: e.target.name, 
                    payload: e.target.value

                })}
            />
            <button>submit</button>
        </form>

        {
            state.submited ? state.name : null
        }
    </div>
  )
}

captalize string:
-----------------
    const str = state.planetName
    const strToCaptalize = str.charAt(0).toUpperCase() + str.slice(1)
    
  const a = 'hello'
  undefined

  const cap = a.charAt(0)
  undefined
  
  cap
  "h"
  
  const toCap = cap.toUpperCase()
  undefined
  
  toCap
  "H"
  
  const res1 = a.slice(1)
  undefined

  res1 
  "ello"
  
  const res2 = a.slice(2)
  undefined

  res2
  "llo"

  toCap + res1 
  "Hello"